* {
    font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
}

nav {
    border-bottom: 3px solid lightgray;
    height: 70px;
    background-color: rgb(231, 231, 231);
}
.Button {
    display: inline-block;
    background-color: rgb(66, 66, 66);
    text-align: center;
    vertical-align: middle;
    line-height: 70px;
    color: white;
    height: 100%;
    width: 150px;
    font-weight: 300;
    font-size: 14px;
    cursor: pointer;
}


.Left_Panel {
    width: 20%;
    background-color: rgb(231, 231, 231);
    height: 900px;
    float: left;
    border-right: 3px solid lightgray;
    box-sizing: border-box;
}
.top_profile {
    text-align: center;
    font-size: 18px;
    font-weight: 600;
    border-bottom: 3px solid lightgray;
    height: 320px;
}
.top_profile img {
    height: 250px;
    margin-bottom: 10px;
}
.bottom_details {
    padding: 40px;
}
.stats {
    padding: 7px;
    padding-left: 0px;
}


.Right_Panel {
    width: 80%;
    background-color: rgb(231, 231, 231);
    height: 900px;
    float: right;
}
.Intro {
    padding-left: 100px;
    padding-right: 150px;
    padding-top: 50px;
}
.Intro img {
    float: left;
    padding: 20px;
}
.text1 {
    padding-top: 1px;
}
.Gallery {
    display: inline-block;
    text-align: center;
    margin-top: 20px;
    width: 100%;
}
.Gallery img {
    margin: 20px;
    align-content: center;
}

h2 {
    font-size: 28px;
    font-weight: 700;

}/* Angela course starts from here  */
/* Angela course starts from here  *//* Angela course starts from here  */
/* Angela course starts from here  *//* Angela course starts from here  */ /* Angela course starts from here  */
/* Angela course starts from here  *//* Angela course starts from here  */
/* Angela course starts from here  */

button {
    height: 60px;
    width: 200px;
    font-size: 18px;
}
/* You can have class selected with STATES like hover, active etc */
button:hover {
    height: 60px;
    width: 200px;
    font-size: 18px;
    background-color: aqua;
}

.span_example {
    text-decoration: underline;
    font-size: 16px;
    font-weight: bold;
    color: brown;
}

/* Using DISPLAY and POSITION property. Display property allows boxes to show next to eachother on the same line (while being able to adjust their wdith)

POSITION: RELATIVE property allows element to move from their original position to LEFT or RIGHT or TOP or BOTTOM margin as specified */

.relative {
    background-color: wheat;
}
.redrelative {
    width: 200px;
    height: 200px;
    background-color: red;
    display: inline-block;
    position: relative;
    left: 550px;
}

.bluerelative {
    width: 200px;
    height: 200px;
    background-color: blue;
    display: inline-block;
}

.yellowrelative {
    width: 200px;
    height: 200px;
    background-color: yellow;
    display: inline-block;
    position: relative;
    top: 150px;
}

/* When we use ABSOLUTE position for a child element, it must be contained inside a conteiner that is set to RELATIVE/ABSOLUTE (or basically any position other than default Static) position. (otherwise it will be absolute to the 'world' */
.absolute {
    background-color: thistle;
    position: relative;
 
}

.redabsolute {
    width: 200px;
    height: 200px;
    background-color: red;
    display: inline-block;
    position: absolute;
    right: 150px;
    bottom: 150px
}
/* using absolute position makes all other objects behave as if that element didnt exist! And move accordingly as if that absolute element was deleted */

/* Use ABSOLUTE position property to take an Element OUT OF HTML FLOW */
.blueabsolute {
    width: 200px;
    height: 200px;
    background-color: blue;
    display: inline-block;
}

.yellowabsolute {
    width: 200px;
    height: 200px;
    background-color: yellow;
    display: inline-block;
 
}

.stickydiv {
    background-color: rgb(238, 227, 238);
}
/* sticky needs atleast ONE (top, left, right, bottom) parameter defined */
.stickyposition {
    width: 200px;
    height: 200px;
    background-color: rgb(209, 209, 124);
    display: inline-block;
    position: sticky;
    top: 20px;
    right: 20px;
}

.fixposition {
    width: 200px;
    height: 200px;
    background-color: rgb(255, 255, 209);
    display: inline-block;
    position: fixed;
    right: 0px;
    bottom: 0px;
}

/* FONTS here */

.testing-fonts {
    
    font-size: 28px;
}

body {
    font-family: 'Times New Roman', Times, serif;
    /* font-size: 1em; */
}

.em-font {
    font-size: 1em;
}

.px-font {
    font-size: 16px;
}

/* This section is about FLEXBOXES */

.flexbox-container {
    background-color: linen;
    height: 600px;

    display: flex;
    flex-direction: row;
    /* Justify-content uses MAIN axis, which in this case is row */
    justify-content: space-around; 
    /* Align-items uses CROSS axis, which in this case is column */
    align-items: center;
    /* flex wrap will stack the contents vertically when screen size shrinks */
    flex-wrap: wrap;
    /* the align content is not used very often */
    align-content: flex-end;

}

.flexbox-item {
    border: 2px solid gray;
    background-color: lightgrey;
    padding: 20px;
    margin: 20px;
}

.flexbox1 {
    height: 100px;
    /* flex shrink helps objects retain minimum width on smaller screen */
    flex-shrink: 0;
    /* flex-basis sets the initial MAIN size of the object */
    flex-basis: 250px;
}

.flexbox2 {
    height: 200px;
    /* flex-grow will let an object grow in certain proportion (to the available space, outside of predefined width) when screen expands */
    flex-grow: 2;
}

.flexbox3 {
    height: 300px;
    flex-grow: 1;
    /* align-self applies a local align logic to the object */
    align-self: flex-end;
}

.form-items {
    min-height: 40px;
}